generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model GlobalUserData {
    uuid            String          @id @default(uuid())
    userId          String          @unique
    birthDate       DateTime?       @db.Date
    quizGoodAnswers Int             @default(0)
    quizBadAnswers  Int             @default(0)
    QuizQuestions   QuizQuestions[]
    Quote           Quote[]

    @@index([userId])
}

model LogLevel {
    id   Int    @id @default(autoincrement())
    name String @unique
    logs Logs[]
}

model Logs {
    id        Int      @id @default(autoincrement())
    message   String   @db.MediumText
    levelId   Int
    createdAt DateTime @default(now())
    level     LogLevel @relation(fields: [levelId], references: [id])

    @@index([levelId], map: "Logs_levelId_fkey")
}

model Config {
    uuid    String @id @default(uuid())
    key     String
    value   String
    guildId String

    @@unique([key, guildId], name: "unique_key_guildId")
    @@index([guildId])
}

model GuildData {
    uuid        String  @id @default(uuid())
    guildId     String  @unique
    debugRoleId String?

    @@index([guildId])
}

model Quote {
    uuid       String         @id @default(uuid())
    guildId    String
    authorUuid String
    quote      String
    context    String         @default("")
    createdAt  DateTime       @default(now())
    author     GlobalUserData @relation(fields: [authorUuid], references: [uuid], onDelete: Cascade)

    @@index([authorUuid], map: "Quote_authorUuid_fkey")
}

model QuizQuestions {
    uuid         String          @id @default(uuid())
    question     String          @unique @db.VarChar(2048)
    answer       String
    badAnswer1   String
    badAnswer2   String
    badAnswer3   String
    createdAt    DateTime        @default(now())
    authorUuid   String?
    guildId      String
    lastTimeUsed DateTime?
    category     String
    difficulty   String
    author       GlobalUserData? @relation(fields: [authorUuid], references: [uuid], onDelete: Cascade)

    @@index([guildId])
    @@index([authorUuid], map: "QuizQuestions_authorUuid_fkey")
}

model BotMessageData {
    uuid      String   @id @default(uuid())
    guildId   String
    channelId String
    messageId String   @unique
    createdAt DateTime @default(now())

    RadioData RadioData[]

    @@index([guildId])
}

model RadioFrequencies {
    uuid               String @default(uuid())
    name               String
    frequency          String
    radioDataUuid      String
    radioData          RadioData @relation(fields: [radioDataUuid], references: [uuid])

    @@id([frequency, radioDataUuid])
}

model RadioData {
    uuid               String         @id @default(uuid())
    botMessageData     BotMessageData @relation(fields: [botMessageDataUuid], references: [uuid])
    botMessageDataUuid String
    internalName       String
    displayName        String
    createdAt          DateTime       @default(now())

    @@index([botMessageDataUuid], map: "RadioData_botMessageDataUuid_fkey")
    RadioFrequencies RadioFrequencies[]
}
